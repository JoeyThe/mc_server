import java.net.Socket;
import java.io.PrintStream;
import java.io.BufferedReader;
import java.io.ByteArrayOutputStream;
import java.io.DataOutputStream;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.InputStreamReader;
import java.io.IOException;

import java.net.InetSocketAddress;
import java.nio.ByteBuffer;
import java.nio.ByteOrder;
import java.nio.channels.SocketChannel;
import java.nio.charset.Charset;
import java.nio.charset.StandardCharsets;
import java.util.Objects;
import java.util.concurrent.atomic.AtomicInteger;

public class SocketTest {
	//private Socket socket;
//	private DataOutputStream out;
//   	private DataInputStream in;

	private SocketChannel sc;
	private ByteBuffer buff;

	public SocketTest() {
		try {
//			socket = new Socket("localhost", 25575);
//	        	out = new DataOutputStream(socket.getOutputStream());
//     			in = new DataInputStream(socket.getInputStream());

			sc = SocketChannel.open(new InetSocketAddress("localhost", 25575));
		} catch (Exception e) {
			e.printStackTrace();
		}
	}
        public static void main(String[] args) {
		SocketTest st = new SocketTest();
		try {
			byte[] command = {(byte) 0x11, (byte) 0x00, (byte) 0x00,(byte) 0x00,(byte) 0x00,(byte) 0x00,(byte) 0x00, (byte) 0x00,
				(byte)0x03,(byte) 0x00,(byte) 0x00,(byte) 0x00,(byte) 0x70,(byte) 0x61,(byte) 0x73,(byte) 0x73,
				(byte) 0x77,(byte) 0x72,(byte) 0x64,(byte) 0x00,(byte) 0x00};
			byte[] query = new byte[256];

			ByteBuffer test = ByteBuffer.wrap(command);

			System.out.println("Connecting socket");
			st.sc.open();
			Thread.sleep(2000);

			System.out.println("Getting socket data");
//			st.getData();
			Thread.sleep(2000);

			System.out.println("Sending command");
//			st.sendCommand(command);
			st.sc.write(test);
			Thread.sleep(2000);

			System.out.println("Getting response");
//			st.printByteArray(st.readResponse(query));
			ByteBuffer response = ByteBuffer.allocate(256);
			st.sc.read(response);
			st.printByteArray(response.array());
			Thread.sleep(2000);

			System.out.println("Getting socket data");
//			st.getData();
			Thread.sleep(2000);

			System.out.println("Closing socket");
//			st.socket.close();
			st.sc.close();
		} catch (Exception e) {
			e.printStackTrace();
		}
        }

//	public void getData() {
//		System.out.println("Bounded? "+this.socket.isBound());
//		System.out.println("Closed? "+this.socket.isClosed());
//		System.out.println("Connected? "+this.socket.isConnected());
//		System.out.println("Input shutdown? "+this.socket.isInputShutdown());
//		System.out.println("Output shutdown? "+this.socket.isOutputShutdown());
//	}

//	public void sendCommand(byte[] command) {
//		try {
//			this.out.write(command);
//		} catch (IOException e) {
//			//e.printStackTrace();
//			System.out.print("FAILURE: Write for command failed! Bytes for attempted command: ");
//			this.printByteArray(command);
//		}
//	}

//	public byte[] readResponse(byte[] query) {
//		try {
//			this.in.read(query);
//		} catch (IOException e) {
//			//e.printStackTrace();
//			System.out.println("FAILURE: Read failed! Returning fail bytes.");
//			byte[] failMsg = {(byte)0xff,(byte)0xff,(byte)0xff};
//			return failMsg;
//		}
//		return query;
//	}

	public void endTest() {

	}

	public void printByteArray(byte[] bytesToPrint) {
		for (byte b : bytesToPrint) {
			System.out.print(String.format("%02x", b));
		}
		System.out.println();
	}	

}

